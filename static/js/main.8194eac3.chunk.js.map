{"version":3,"sources":["logo2.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","display","margin","spacing","paper","marginTop","flexDirection","alignItems","avatar","backgroundColor","palette","secondary","main","width","height","form","submit","App","classes","Container","component","maxWidth","className","CssBaseline","Avatar","Link","href","src","logo","alt","TextField","fullWidth","required","label","autoComplete","type","Button","variant","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,mC,kPCQrCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,OACT,QAAS,CAAEC,OAAQH,EAAMI,QAAQ,KAEnCC,MAAO,CACLC,UAAWN,EAAMI,QAAQ,GACzBF,QAAS,OACTK,cAAe,SACfC,WAAY,UAEdC,OAAQ,CACNN,OAAQH,EAAMI,QAAQ,GACtBM,gBAAiBV,EAAMW,QAAQC,UAAUC,KACzCC,MAAOd,EAAMI,QAAQ,IACrBW,OAAQf,EAAMI,QAAQ,KAExBY,KAAM,CACJF,MAAO,OACPR,UAAWN,EAAMI,QAAQ,IAE3Ba,OAAQ,CACNd,OAAQH,EAAMI,QAAQ,EAAG,EAAG,QAgCjBc,MA3Bf,WACE,IAAMC,EAAUrB,IAChB,OACE,kBAACsB,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAAKC,UAAWJ,EAAQlB,MAC3D,kBAACuB,EAAA,EAAD,KACE,4BAAQD,UAAWJ,EAAQd,OACzB,kBAACoB,EAAA,EAAD,CAAQF,UAAWJ,EAAQV,QACzB,kBAACiB,EAAA,EAAD,CAAMC,KAAK,4CACT,yBAAKC,IAAKC,IAAMN,UAAU,WAAWO,IAAI,WAG7C,0BAAMP,UAAWJ,EAAQH,MACvB,kBAACe,EAAA,EAAD,CAAWC,WAAS,EAACC,UAAQ,EAACC,MAAM,gBAClC/B,OAAO,SAASgC,aAAa,QAAQC,KAAK,UAC5C,kBAACL,EAAA,EAAD,CAAWC,WAAS,EAACC,UAAQ,EAACC,MAAM,WAAW/B,OAAO,SACpDiC,KAAK,aACP,kBAACC,EAAA,EAAD,CAAQD,KAAK,SAASJ,WAAS,EAACM,QAAQ,YACtCC,MAAM,UAAUhB,UAAWJ,EAAQF,QADrC,gBCvCQuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8194eac3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo2.b302d1ab.svg\";","import React from 'react';\nimport logo from './logo2.svg'; //change default logo\nimport './App.css';\n// import material-ui\nimport {Button, Container, CssBaseline, TextField, Avatar, Link } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\n// define useStyles() function\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    '& > *': { margin: theme.spacing(1), },\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n    width: theme.spacing(13),\n    height: theme.spacing(13),\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <Container component=\"main\" maxWidth=\"xs\" className={classes.root}>\n      <CssBaseline>\n        <header className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <Link href=\"https://loitd.github.io/reactgithubpage/\">\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              </Link>\n          </Avatar>\n          <form className={classes.form}>\n            <TextField fullWidth required label=\"Email Address\" \n              margin=\"normal\" autoComplete=\"email\" type=\"email\"/>\n            <TextField fullWidth required label=\"Password\" margin=\"normal\" \n              type=\"password\"/>\n            <Button type=\"submit\" fullWidth variant=\"contained\" \n              color=\"primary\" className={classes.submit}>\n              Sign In\n            </Button>\n        </form>\n        </header>\n      </CssBaseline>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}